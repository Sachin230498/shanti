In React, Hooks are special functions that allow you to use state and other React features without writing a class component. Introduced in React 16.8, Hooks make it easier to organize and reuse stateful logic across functional components.

Here are some common Hooks:

useState: Adds state to functional components.


const [count, setCount] = useState(0);
Here, count is the state variable, and setCount is the function to update it.


useEffect: Allows you to perform side effects (e.g., data fetching, subscriptions) in functional components. It runs after the component renders or when specified values change.

useEffect(() => {
   console.log('Component rendered or updated');
}, [count]); // runs whenever `count` changes
useContext: Provides a way to pass data through the component tree without manually passing props.


const value = useContext(MyContext);
useRef: Returns a mutable ref object whose .current property holds a value that persists across renders.

const inputRef = useRef(null);
useReducer: A more advanced alternative to useState, useful for managing complex state logic.


const [state, dispatch] = useReducer(reducer, initialState);